{
  "_args": [
    [
      {
        "raw": "profanity-filter",
        "scope": null,
        "escapedName": "profanity-filter",
        "name": "profanity-filter",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\x7dar\\Desktop\\Port 5000"
    ]
  ],
  "_from": "profanity-filter@latest",
  "_id": "profanity-filter@0.2.1",
  "_inCache": true,
  "_location": "/profanity-filter",
  "_npmUser": {
    "name": "jwils0n",
    "email": "james@jwilson.us"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "profanity-filter",
    "scope": null,
    "escapedName": "profanity-filter",
    "name": "profanity-filter",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/profanity-filter/-/profanity-filter-0.2.1.tgz",
  "_shasum": "b9dc0ab81bc0863199ff32667a0547f254885e8b",
  "_shrinkwrap": null,
  "_spec": "profanity-filter",
  "_where": "C:\\Users\\x7dar\\Desktop\\Port 5000",
  "author": {
    "name": "James Wilson",
    "email": "james@jwilson.us",
    "url": "https://github.com/jwils0n"
  },
  "bugs": {
    "url": "https://github.com/jwils0n/profanity-filter/issues"
  },
  "dependencies": {},
  "description": "A node.js utility for masking words or phrases in strings that aren't allowed.",
  "devDependencies": {
    "mocha": "1.16.2"
  },
  "directories": {},
  "dist": {
    "shasum": "b9dc0ab81bc0863199ff32667a0547f254885e8b",
    "tarball": "https://registry.npmjs.org/profanity-filter/-/profanity-filter-0.2.1.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/jwils0n/profanity-filter",
  "keywords": [
    "curse",
    "words",
    "string",
    "bad",
    "unallowed",
    "profanity",
    "filter",
    "clean"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jwils0n/profanity-filter/LICENSE"
    }
  ],
  "main": "lib/filter",
  "maintainers": [
    {
      "name": "jwils0n",
      "email": "james@jwilson.us"
    }
  ],
  "name": "profanity-filter",
  "optionalDependencies": {},
  "readme": "# profanity-filter\n\n[![Build Status](https://travis-ci.org/jwils0n/profanity-filter.png)](https://travis-ci.org/jwils0n/profanity-filter)\n\nA static node.js utility for masking words or phrases in strings that aren't allowed.\n\n## configuration\n\nThere are three methods of replacement, outlined below ('word' requires you specify a replacement for each word):\n\n```javascript\nstars   - That **** UX change was such a pain in the ***\ngrawlix - That &!%$ UX change was such a pain in the #@%\nword    - That darn UX change was such a pain in the badonkadonk\n```\n\nNote: 'stars' is the default method of replacement\n\n## methods\n\n### filter.clean(string)\n\nTakes supplied string and runs the filter based on the current dictionary of unallowed words and replacement method. Returns the filtered string.\n\n```javascript\nvar filter = require('filter');\nconsole.log(filter.clean('String I\\'d like to filter for inappropriate words.'));\n```\n\n### filter.seed(name)\n\nPopulates the internal filter dictionary using a seed data JSON file (must live in lib/seeds).\n\n```javascript\nvar filter = require('filter');\nfilter.seed('profanities');\n```\n\n###filter.debug()\n\nReturns the dictionary, replacementMethod, and grawlixChars internal properties for debugging purposes.\n\n```javascript\nvar filter = require('filter');\nfilter.debug()\n```\n\n### filter.setReplacementMethod(string)\n\nGlobally sets the method of replacement. Accepts 'stars', 'word', and 'grawlix'.\n\n```javascript\nvar filter = require('filter');\nfilter.setReplacementMethod('grawlix');\n```\n\n### filter.setGrawlixChars(array)\n\nGlobally sets the grawlix characters to be used as replacements, if grawlix is the current replacementMethod.\n\n```javascript\nvar filter = require('filter');\nfilter.setGrawlixChars(['1', '2', '3', '4', '5', '6']);\n```\n\n### filter.addWord(string, [string])\n\nAdds a word to the internal replacement dictionary. The optional second parameter is used if the replacementMethod is set to 'word'. If the word method is set and no replacement is passed, the filter will default to 'BLEEP'.\n\n```javascript\nvar filter = require('filter');\nfilter.addWord('ass', 'badonkadonk');\n```\n\n### filter.removeWord(string)\n\nRemoves a word from the internal replacement dicitonary.\n\n```javascript\nvar filter = require('filter');\nfilter.removeWord('ass');\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jwils0n/profanity-filter.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.2.1"
}
